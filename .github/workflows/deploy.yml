name: Deploy

on:
  pull_request:
  push:
    branches:
      - main
      - next

jobs:
  unit-tests-api:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 16.x ]
      fail-fast: true
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Yarn
        run: npm install -g yarn
      - name: Start environment to tests
        run: docker-compose up -d
      - name: Install dependencies
        run: yarn install
      - name: Run unit tests
        run: yarn test:ci
      - name: Stop containers
        if: always()
        run: docker-compose down

  integration-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 16.x ]
      fail-fast: true
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Yarn
        run: npm install -g yarn
      - name: Start environment to tests
        run: docker-compose up -d
      - name: Install dependencies
        run: yarn install
      - name: Run unit tests
        run: yarn test:int:ci
      - name: Stop containers
        if: always()
        run: docker-compose down

  semantic-release:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs:
      - unit-tests-api
      - integration-tests
    strategy:
      matrix:
        node-version: [ 18.x ]
    outputs:
      is-new-version: ${{ steps.version.outputs.new_release_published }}
      version: ${{ steps.version.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Semantic Release
        id: version
        uses: cycjimmy/semantic-release-action@v3.4.1
        with:
          semantic_version: 18
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/github
        env:
          GITHUB_TOKEN: ${{ secrets.GH_SR_TOKEN }}

  docker-build-and-push-api:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && needs.semantic-release.outputs.is-new-version == 'true'
    needs:
      - semantic-release
    strategy:
      matrix:
        node-version: [ 16.x ]
    permissions:
      contents: read
      packages: write
    env:
      IMAGE: ${{ secrets.DOCKER_REGISTRY }}/annotto-api
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.extract_branch.outputs.branch }}
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}:latest , ${{ env.IMAGE }}:${{ needs.semantic-release.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}

  docker-build-and-push-front:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && needs.semantic-release.outputs.is-new-version == 'true'
    needs:
      - semantic-release
    strategy:
      matrix:
        node-version: [ 16.x ]
    permissions:
      contents: read
      packages: write
    env:
      IMAGE: ${{ secrets.DOCKER_REGISTRY }}/annotto-front
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.extract_branch.outputs.branch }}
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./annotto-front
          push: true
          tags: ${{ env.IMAGE }}:latest , ${{ env.IMAGE }}:${{ needs.semantic-release.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}

  bundle-release:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && needs.semantic-release.outputs.is-new-version == 'true'
    needs:
      - semantic-release
    strategy:
      matrix:
        node-version: [ 16.x ]
    permissions:
      contents: read
      packages: write
    env:
      IMAGE: ${{ secrets.DOCKER_REGISTRY }}/annotto
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.extract_branch.outputs.branch }}
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./bundle/Dockerfile.full
          push: true
          tags: ${{ env.IMAGE }}:latest , ${{ env.IMAGE }}:${{ needs.semantic-release.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
